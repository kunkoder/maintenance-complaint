// Add this method to EquipmentService
    public ImportUtil.ImportResult importComplaintsFromExcel(List<Map<String, Object>> data) {
        List<String> errorMessages = new ArrayList<>();
        int importedCount = 0;

        if (data == null || data.isEmpty()) {
            throw new IllegalArgumentException("No data to import.");
        }

        for (int i = 0; i < data.size(); i++) {
            Map<String, Object> row = data.get(i);
            try {
                ComplaintDTO dto = new ComplaintDTO();

                // Map Area (optional if not required)
                String areaCode = importUtil.toString(row.get("area"));
                if (areaCode != null) {
                    AreaDTO areaDTO = new AreaDTO();
                    areaDTO.setCode(areaCode);
                    dto.setArea(areaDTO);
                }

                // ✅ Equipment (REQUIRED)
                String equipmentCode = importUtil.toString(row.get("equipment"));
                if (equipmentCode == null || equipmentCode.trim().isEmpty()) {
                    throw new IllegalArgumentException("Equipment is required");
                }
                EquipmentDTO equipmentDTO = new EquipmentDTO();
                equipmentDTO.setCode(equipmentCode);
                dto.setEquipment(equipmentDTO);

                // ✅ Reporter (REQUIRED)
                String reporterEmpId = importUtil.toString(row.get("reporter"));
                if (reporterEmpId == null || reporterEmpId.trim().isEmpty()) {
                    throw new IllegalArgumentException("Reporter is required");
                }
                UserDTO reporterDTO = new UserDTO();
                reporterDTO.setEmployeeId(reporterEmpId);
                dto.setReporter(reporterDTO);

                // ✅ Assignee (REQUIRED)
                String assigneeEmpId = importUtil.toString(row.get("assignee"));
                if (assigneeEmpId == null || assigneeEmpId.trim().isEmpty()) {
                    throw new IllegalArgumentException("Assignee is required");
                }
                UserDTO assigneeDTO = new UserDTO();
                assigneeDTO.setEmployeeId(assigneeEmpId);
                dto.setAssignee(assigneeDTO);

                // ✅ Priority (REQUIRED)
                String priorityStr = importUtil.toString(row.get("priority"));
                if (priorityStr == null || priorityStr.trim().isEmpty()) {
                    throw new IllegalArgumentException("Priority is required");
                }
                try {
                    dto.setPriority(Complaint.Priority.valueOf(priorityStr.trim().toUpperCase()));
                } catch (IllegalArgumentException e) {
                    throw new IllegalArgumentException(
                            "Invalid Priority value: '" + priorityStr + "'. Must be one of: LOW, MEDIUM, HIGH");
                }

                // ✅ Category (REQUIRED)
                String categoryStr = importUtil.toString(row.get("category"));
                if (categoryStr == null || categoryStr.trim().isEmpty()) {
                    throw new IllegalArgumentException("Category is required");
                }
                try {
                    dto.setCategory(Complaint.Category.valueOf(categoryStr.trim().toUpperCase()));
                } catch (IllegalArgumentException e) {
                    throw new IllegalArgumentException("Invalid Category value: '" + categoryStr
                            + "'. Must be one of: MECHANICAL, ELECTRICAL, IT");
                }

                // Optional fields
                dto.setSubject(importUtil.toString(row.get("subject")));
                dto.setDescription(importUtil.toString(row.get("description")));

                // ✅ Status (optional, but validate if present)
                String statusStr = importUtil.toString(row.get("status"));
                if (statusStr != null && !statusStr.trim().isEmpty()) {
                    try {
                        dto.setStatus(Complaint.Status.valueOf(statusStr.trim().toUpperCase()));
                    } catch (IllegalArgumentException e) {
                        throw new IllegalArgumentException("Invalid Status value: '" + statusStr + "'");
                    }
                } else {
                    dto.setStatus(null); // or default to OPEN
                }

                dto.setActionTaken(importUtil.toString(row.get("actionTaken")));
                dto.setReportDate(importUtil.toLocalDateTime(row.get("reportDate")));
                dto.setCloseTime(importUtil.toLocalDateTime(row.get("closeTime")));
                dto.setTotalResolutionTimeMinutes(importUtil.toInteger(row.get("totalResolutionTimeMinutes")));

                // Final validation using Bean Validation (still useful!)
                Set<ConstraintViolation<ComplaintDTO>> violations = validator.validate(dto);
                if (!violations.isEmpty()) {
                    String msg = violations.stream()
                            .map(v -> v.getPropertyPath() + ": " + v.getMessage())
                            .collect(Collectors.joining(", "));
                    throw new IllegalArgumentException("Validation failed: " + msg);
                }

                if (complaintRepository.existsByCodeIgnoreCase(dto.getCode())) {
                    throw new IllegalArgumentException("Duplicate equipment code: " + dto.getCode());
                }

                createComplaint(dto, null);
                importedCount++;

            } catch (Exception e) {
                String message = e.getMessage() != null ? e.getMessage() : "Unknown error";
                errorMessages.add("Row " + (i + 1) + ": " + message);
            }
        }

        return new ImportUtil.ImportResult(importedCount, errorMessages);
    }